unit uPSI_SqlExpr;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface



uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_SqlExpr = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_TSqlServerMethod(CL: TPSPascalCompiler);
procedure SIRegister_TSQLTable(CL: TPSPascalCompiler);
procedure SIRegister_TSQLStoredProc(CL: TPSPascalCompiler);
procedure SIRegister_TSQLQuery(CL: TPSPascalCompiler);
procedure SIRegister_TSQLDataSet(CL: TPSPascalCompiler);
procedure SIRegister_TCustomSQLDataSet(CL: TPSPascalCompiler);
procedure SIRegister_TFLDDesc(CL: TPSPascalCompiler);
procedure SIRegister_TSQLDataLink(CL: TPSPascalCompiler);
procedure SIRegister_TCustomConnection(CL: TPSPascalCompiler);
procedure SIRegister_TSQLConnection(CL: TPSPascalCompiler);
procedure SIRegister_TConnectionData(CL: TPSPascalCompiler);
procedure SIRegister_TSQLMonitor(CL: TPSPascalCompiler);
procedure SIRegister_TSQLBlobStream(CL: TPSPascalCompiler);
procedure SIRegister_SPParamDesc(CL: TPSPascalCompiler);
procedure SIRegister_SqlExpr(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SqlExpr_Routines(S: TPSExec);
procedure RIRegister_TSqlServerMethod(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLTable(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLStoredProc(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLQuery(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLDataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomSQLDataSet(CL: TPSRuntimeClassImporter);
procedure RIRegister_TFLDDesc(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLDataLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TCustomConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLConnection(CL: TPSRuntimeClassImporter);
procedure RIRegister_TConnectionData(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLMonitor(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSQLBlobStream(CL: TPSRuntimeClassImporter);
procedure RIRegister_SPParamDesc(CL: TPSRuntimeClassImporter);
procedure RIRegister_SqlExpr(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Data.DB
  ,Data.DBCommon
  ,Data.DBCommonTypes
  ,Data.DBXCommon
  ,Data.SqlExpr
  ;


procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SqlExpr]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TSqlServerMethod(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSqlServerMethod') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSqlServerMethod') do
  begin
    RegisterMethod('Procedure ExecuteMethod');
    RegisterProperty('ServerMethodName', 'AnsiString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLTable(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLTable') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLTable') do
  begin
    RegisterMethod('Procedure DeleteRecords');
    RegisterMethod('Procedure GetIndexNames( List : TStrings)');
    RegisterProperty('IndexFields', 'TField Integer', iptrw);
    RegisterProperty('IndexFieldCount', 'Integer', iptr);
    RegisterProperty('IndexFieldNames', 'AnsiString', iptrw);
    RegisterProperty('IndexName', 'AnsiString', iptrw);
    RegisterProperty('MasterFields', 'AnsiString', iptrw);
    RegisterProperty('MasterSource', 'TDataSource', iptrw);
    RegisterProperty('TableName', 'AnsiString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLStoredProc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLStoredProc') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLStoredProc') do
  begin
    RegisterMethod('Function ExecProc : Integer');
    RegisterMethod('Function NextRecordSet : TCustomSQLDataSet');
    RegisterProperty('PackageName', 'AnsiString', iptrw);
    RegisterProperty('StoredProcName', 'AnsiString', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLQuery(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLQuery') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLQuery') do
  begin
    RegisterProperty('Text', 'AnsiString', iptr);
    RegisterProperty('SQL', 'TStrings', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLDataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomSQLDataSet', 'TSQLDataSet') do
  with CL.AddClassN(CL.FindClass('TCustomSQLDataSet'),'TSQLDataSet') do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomSQLDataSet(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDataSet', 'TCustomSQLDataSet') do
  with CL.AddClassN(CL.FindClass('TDataSet'),'TCustomSQLDataSet') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent; DBXReader : TDBXReader; AOwnsInstance : Boolean);');
    RegisterProperty('CommandText', 'string', iptrw);
    RegisterMethod('Procedure GetCommandNames( List : TStrings)');
    RegisterMethod('Function GetKeyFieldNames( List : TStrings) : Integer');
    RegisterMethod('Function GetQuoteChar : string');
    RegisterMethod('Function ParamByName( const Value : string) : TParam');
    RegisterMethod('Procedure PrepareStatement');
    RegisterProperty('IndexDefs', 'TIndexDefs', iptrw);
    RegisterMethod('Procedure SetSchemaInfo( SchemaType : TSchemaType; SchemaObjectName, SchemaPattern : string; PackageName : string)');
    RegisterProperty('Prepared', 'Boolean', iptrw);
    RegisterProperty('DesignerData', 'AnsiString', iptrw);
    RegisterProperty('RecordCount', 'Integer', iptr);
    RegisterProperty('SQLConnection', 'TSQLConnection', iptrw);
    RegisterProperty('ParseSelectSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseDeleteSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseUpdateSql', 'TParseSqlEvent', iptrw);
    RegisterProperty('ParseInsertSql', 'TParseInsertSqlEvent', iptrw);
    RegisterProperty('SchemaName', 'AnsiString', iptrw);
    RegisterProperty('GetMetadata', 'Boolean', iptrw);
    RegisterProperty('NumericMapping', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TFLDDesc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TFLDDesc') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TFLDDesc') do
  begin
    RegisterProperty('FFldNum', 'Word', iptrw);
    RegisterProperty('FName', 'string', iptrw);
    RegisterProperty('FFldType', 'Word', iptrw);
    RegisterProperty('FSubType', 'Word', iptrw);
    RegisterProperty('FUnits1', 'SmallInt', iptrw);
    RegisterProperty('FUnits2', 'SmallInt', iptrw);
    RegisterProperty('FOffset', 'Word', iptrw);
    RegisterProperty('FLen', 'LongWord', iptrw);
    RegisterProperty('FNullOffset', 'Word', iptrw);
    RegisterProperty('FFLDVchk', 'FLDVchk', iptrw);
    RegisterProperty('FFLDRights', 'FLDRights', iptrw);
    RegisterProperty('FCalcField', 'WordBool', iptrw);
    RegisterProperty('iFldNum', 'Word', iptrw);
    RegisterProperty('szName', 'string', iptrw);
    RegisterProperty('iFldType', 'Word', iptrw);
    RegisterProperty('iSubType', 'Word', iptrw);
    RegisterProperty('iUnits1', 'SmallInt', iptrw);
    RegisterProperty('iUnits2', 'SmallInt', iptrw);
    RegisterProperty('iOffset', 'Word', iptrw);
    RegisterProperty('iLen', 'LongWord', iptrw);
    RegisterProperty('iNullOffset', 'Word', iptrw);
    RegisterProperty('efldvVchk', 'FLDVchk', iptrw);
    RegisterProperty('efldrRights', 'FLDRights', iptrw);
    RegisterProperty('bCalcField', 'WordBool', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLDataLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TDetailDataLink', 'TSQLDataLink') do
  with CL.AddClassN(CL.FindClass('TDetailDataLink'),'TSQLDataLink') do
  begin
    RegisterMethod('Constructor Create( ADataSet : TCustomSQLDataSet)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TCustomConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TCustomConnection') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TCustomConnection') do
  begin
    RegisterMethod('Procedure Open;');
    RegisterMethod('Procedure Close');
    RegisterProperty('Connected', 'Boolean', iptrw);
    RegisterProperty('DataSets', 'TDataSet Integer', iptr);
    RegisterProperty('DataSetCount', 'Integer', iptr);
    RegisterProperty('LoginPrompt', 'Boolean', iptrw);
    RegisterProperty('AfterConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeConnect', 'TNotifyEvent', iptrw);
    RegisterProperty('AfterDisconnect', 'TNotifyEvent', iptrw);
    RegisterProperty('BeforeDisconnect', 'TNotifyEvent', iptrw);
    //RegisterProperty('OnLogin', 'TLoginEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLConnection(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TCustomConnection', 'TSQLConnection') do
  with CL.AddClassN(CL.FindClass('TCustomConnection'),'TSQLConnection') do
  begin
    RegisterMethod('Procedure AddConnectNotification( Listener : TObject; Event : TConnectChangeEvent)');
    RegisterMethod('Procedure RemoveConnectNotification( Listener : TObject)');
    RegisterMethod('Function CloneConnection : TSQLConnection');
    RegisterMethod('Procedure CloseDataSets');
    RegisterMethod('Procedure Commit');
    RegisterMethod('Procedure CommitFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Function Execute( const SQL : string; Params : TParams) : Integer;');
    RegisterMethod('Function Execute( const SQL : string; Params : TParams; var ResultSet : TDataSet) : Integer;');
    RegisterMethod('Function ExecuteDirect( const SQL : string) : Integer');
    RegisterMethod('Procedure GetFieldNames( const TableName : string; List : TStrings);');
    RegisterMethod('Procedure GetFieldNames( const TableName : string; SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetIndexNames( const TableName : string; List : TStrings);');
    RegisterMethod('Procedure GetIndexNames( const TableName, SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames( List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames( const PackageName : string; List : TStrings);');
    RegisterMethod('Procedure GetProcedureNames( const PackageName, SchemaName : string; List : TStrings);');
    RegisterMethod('Procedure GetPackageNames( List : TStrings);');
    RegisterMethod('Procedure GetSchemaNames( List : TStrings);');
    RegisterMethod('Procedure GetCommandTypes( List : TStrings)');
    RegisterMethod('Procedure GetServerMethodNames( List : TStrings)');
    RegisterMethod('Function GetDefaultSchemaName : string');
    RegisterMethod('Procedure GetProcedureParams( ProcedureName : string; List : TProcParamList);');
    RegisterMethod('Procedure GetProcedureParams( ProcedureName, PackageName : string; List : TProcParamList);');
    RegisterMethod('Procedure GetProcedureParams( ProcedureName, PackageName, SchemaName : string; List : TProcParamList);');
    RegisterMethod('Procedure GetTableNames( List : TStrings; SystemTables : Boolean);');
    RegisterMethod('Procedure GetTableNames( List : TStrings; SchemaName : string; SystemTables : Boolean);');
    RegisterMethod('Procedure LoadParamsFromIniFile( FFileName : string)');
    RegisterMethod('Procedure Rollback');
    RegisterMethod('Procedure RollbackFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Procedure RollbackIncompleteFreeAndNil( var Transaction : TDBXTransaction)');
    RegisterMethod('Function HasTransaction( Transaction : TDBXTransaction) : Boolean');
    //RegisterMethod('Procedure SetTraceEvent( Event : TDBXTraceEvent)');
    RegisterMethod('Function BeginTransaction : TDBXTransaction;');
    RegisterMethod('Function BeginTransaction( Isolation : TDBXIsolation) : TDBXTransaction;');
    RegisterMethod('Function GetLoginUsername : string');
    RegisterProperty('ActiveStatements', 'LongWord', iptr);
    RegisterProperty('AutoClone', 'Boolean', iptrw);
    RegisterProperty('ConnectionState', 'TConnectionState', iptrw);
    RegisterProperty('DataSets', 'TCustomSQLDataSet Integer', iptr);
    RegisterProperty('InTransaction', 'Boolean', iptr);
    RegisterProperty('LocaleCode', 'TLocaleCode', iptrw);
    RegisterProperty('MaxStmtsPerConn', 'LongWord', iptr);
    RegisterProperty('MetaData', 'TDBXDatabaseMetaData', iptr);
    RegisterProperty('MultipleTransactionsSupported', 'LongBool', iptr);
    RegisterProperty('ParamsLoaded', 'Boolean', iptrw);
    RegisterProperty('DBXConnection', 'TDBXConnection', iptr);
    RegisterProperty('SQLHourGlass', 'Boolean', iptrw);
    RegisterProperty('TraceCallbackEvent', 'TDBXTraceEvent', iptr);
    RegisterProperty('TransactionsSupported', 'LongBool', iptr);
    RegisterProperty('ConnectionData', 'TConnectionData', iptr);
    RegisterProperty('UniqueID', 'AnsiString', iptrw);
    RegisterProperty('GetDriverFunc', 'AnsiString', iptrw);
    RegisterProperty('LibraryName', 'AnsiString', iptrw);
    RegisterProperty('VendorLib', 'AnsiString', iptrw);
    RegisterProperty('ConnectionName', 'AnsiString', iptrw);
    RegisterProperty('DriverName', 'AnsiString', iptrw);
    RegisterProperty('KeepConnection', 'Boolean', iptrw);
    RegisterProperty('LoadParamsOnConnect', 'Boolean', iptrw);
    RegisterProperty('Params', 'TStrings', iptrw);
    RegisterProperty('TableScope', 'TTableScopes', iptrw);
    RegisterProperty('ValidatePeerCertificate', 'TValidateCertificate', iptrw);
    //RegisterProperty('OnLogin', 'TSQLConnectionLoginEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TConnectionData(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TConnectionData') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TConnectionData') do
  begin
    RegisterMethod('Constructor Create( AConnection : TSQLConnection);');
    RegisterMethod('Constructor Create( AParentData : TConnectionData);');
    RegisterMethod('Procedure UpdateProperties( NewProperties : TStrings)');
    RegisterMethod('Procedure AddProperties( NewProperties : TStrings)');
    RegisterMethod('Function BeginUpdate : Boolean');
    RegisterMethod('Procedure EndUpdate');
    RegisterMethod('Procedure ReloadProperties');
    RegisterMethod('Procedure RefreshProperties');
    RegisterProperty('ConnectionName', 'AnsiString', iptrw);
    RegisterProperty('DriverName', 'AnsiString', iptrw);
    RegisterProperty('Properties', 'TDBXProperties', iptrw);
    RegisterProperty('DelegateConnection', 'TConnectionData', iptrw);
    RegisterProperty('IsModified', 'Boolean', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLMonitor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TSQLMonitor') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TSQLMonitor') do
  begin
    RegisterMethod('Procedure LoadFromFile( AFileName : string)');
    RegisterMethod('Procedure SaveToFile( AFileName : string)');
    RegisterProperty('MaxTraceCount', 'Integer', iptrw);
    RegisterProperty('TraceCount', 'Integer', iptr);
    RegisterProperty('Active', 'Boolean', iptrw);
    RegisterProperty('AutoSave', 'Boolean', iptrw);
    RegisterProperty('FileName', 'string', iptrw);
    //RegisterProperty('OnLogTrace', 'TTraceLogEvent', iptrw);
    //RegisterProperty('OnTrace', 'TTraceEvent', iptrw);
    RegisterProperty('TraceList', 'TStrings', iptrw);
    RegisterProperty('SQLConnection', 'TSQLConnection', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSQLBlobStream(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TMemoryStream', 'TSQLBlobStream') do
  with CL.AddClassN(CL.FindClass('TMemoryStream'),'TSQLBlobStream') do
  begin
    RegisterMethod('Constructor Create( Field : TBlobField; Mode : TBlobStreamMode)');
    RegisterMethod('Procedure ReadBlobData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SPParamDesc(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'SPParamDesc') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'SPParamDesc') do
  begin
    RegisterProperty('iParamNum', 'Word', iptrw);
    RegisterProperty('szName', 'AnsiString', iptrw);
    RegisterProperty('iArgType', 'TParamType', iptrw);
    RegisterProperty('iDataType', 'TFieldType', iptrw);
    RegisterProperty('iUnits1', 'SmallInt', iptrw);
    RegisterProperty('iUnits2', 'SmallInt', iptrw);
    RegisterProperty('iLen', 'LongWord', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SqlExpr(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('eSQLTable','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLView','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLSystemTable','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLSynonym','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLTempTable','LongWord').SetUInt( $0010);
 CL.AddConstantN('eSQLLocal','LongWord').SetUInt( $0020);
 CL.AddConstantN('eSQLProcedure','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLFunction','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLPackage','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLSysProcedure','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLRowId','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLRowVersion','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLAutoIncr','LongWord').SetUInt( $0004);
 CL.AddConstantN('eSQLDefault','LongWord').SetUInt( $0008);
 CL.AddConstantN('eSQLNonUnique','LongWord').SetUInt( $0001);
 CL.AddConstantN('eSQLUnique','LongWord').SetUInt( $0002);
 CL.AddConstantN('eSQLPrimaryKey','LongWord').SetUInt( $0004);
 CL.AddConstantN('SSelect','AnsiString').SetString( 'select');
 CL.AddConstantN('SSelectStar','AnsiString').SetString( ' select * ');
 CL.AddConstantN('SSelectStarFrom','AnsiString').SetString( ' select * from ');
 CL.AddConstantN('SSelectSpaces','AnsiString').SetString( ' select ');
 CL.AddConstantN('SWhere','AnsiString').SetString( ' where ');
 CL.AddConstantN('SAnd','AnsiString').SetString( ' and ');
 CL.AddConstantN('SOrderBy','AnsiString').SetString( ' order by ');
 CL.AddConstantN('SParam','AnsiString').SetString( '?');
 CL.AddConstantN('DefaultCursor','LongInt').SetInt( 0);
 CL.AddConstantN('HourGlassCursor','LongInt').SetInt( - 11);
 CL.AddConstantN('DefaultMaxBlobSize','LongInt').SetInt( - 1);
 CL.AddConstantN('DefaultRowsetSize','LongInt').SetInt( DBXDefaultRowSetSize);
 CL.AddConstantN('TErrorMessageSize','LongInt').SetInt( 2048);
 // CL.AddTypeS('TFieldList', 'TList');
  //CL.AddTypeS('TLocale', 'Pointer');
  //CL.AddTypeS('SQLResult', 'TDBXErrorCode');

  CL.AddTypeS('TLocaleCode', 'Integer');
  CL.AddTypeS('TSQLExceptionType', '( exceptConnection, exceptCommand, exceptCu'
   +'rsor, exceptMetaData, exceptUseLast )');
  CL.AddTypeS('TTransIsolationLevel', '( xilREADCOMMITTED, xilREPEATABLEREAD, x'
   +'ilDIRTYREAD, xilCUSTOM )');
  CL.AddTypeS('TTransactionDesc', 'record TransactionID : LongWord; GlobalID : '
   +'LongWord; IsolationLevel : TTransIsolationLevel; CustomIsolation : LongWor'
   +'d; end');
  SIRegister_SPParamDesc(CL);
  SIRegister_TSQLBlobStream(CL);
  CL.AddTypeS('TConnectionUserType', '( eUserMonitor, eUserDataSet )');
  //CL.AddTypeS('TTraceEvent', 'Procedure ( Sender : TObject; TraceInfo : TDBXTraceInfo; var LogTrace : Boolean)');
  //CL.AddTypeS('TTraceLogEvent', 'Procedure ( Sender : TObject; TraceInfo : TDBXTraceInfo)');
  SIRegister_TSQLMonitor(CL);
  CL.AddTypeS('EConnectFlag', '( eConnect, eReconnect, eDisconnect )');
  CL.AddTypeS('TSchemaType', '( stNoSchema, stTables, stSysTables, stProcedures'
   +', stColumns, stProcedureParams, stIndexes, stPackages, stUserNames )');
  CL.AddTypeS('TConnectionState', '( csStateClosed, csStateOpen, csStateConnect'
   +'ing, csStateExecuting, csStateFetching, csStateDisconnecting )');
  CL.AddTypeS('TTableScope', '( tsSynonym, tsSysTable, tsTable, tsView )');
  CL.AddTypeS('TTableScopes', 'set of TTableScope');
 { CL.AddTypeS('TSQLConnectionLoginEvent', 'Procedure ( Database : TSQLConnectio'
   +'n; LoginParams : TStrings)'); }
  SIRegister_TConnectionData(CL);
  SIRegister_TCustomConnection(CL);
  SIRegister_TSQLConnection(CL);
  SIRegister_TSQLDataLink(CL);
  SIRegister_TFLDDesc(CL);
  CL.AddTypeS('TSQLSchemaInfo', 'record FType : TSchemaType; ObjectName : strin'
   +'g; Pattern : string; PackageName : string; end');
  CL.AddTypeS('TFieldDescList', 'array of TFLDDesc');
  CL.AddTypeS('TParseSqlEvent', 'Procedure ( var FieldNames : TStrings; SQL : s'
   +'tring; var TableName : string)');
  CL.AddTypeS('TParseInsertSqlEvent', 'Procedure ( var FieldNames : TStrings; S'
   +'QL : string; var BindAllFields : Boolean; var TableName : string)');
  SIRegister_TCustomSQLDataSet(CL);
  SIRegister_TSQLDataSet(CL);
  SIRegister_TSQLQuery(CL);
  SIRegister_TSQLStoredProc(CL);
  SIRegister_TSQLTable(CL);
  SIRegister_TSqlServerMethod(CL);
// CL.AddDelphiFunction('Procedure LoadParamListItems( Params : TParams; ProcParams : TProcParamList)');
 //CL.AddDelphiFunction('Procedure FreeProcParams( var ProcParams : TProcParamList)');
 CL.AddDelphiFunction('Procedure GetConnectionNames( List : TStrings; Driver : string; DesignMode : Boolean)');
 CL.AddDelphiFunction('Function GetDisplayDriverName( const ADriverName : string) : string');
 CL.AddDelphiFunction('Procedure GetDisplayDriverNames( List : TStrings; DesignMode : Boolean)');
 CL.AddDelphiFunction('Procedure GetDriverNames( List : TStrings; DesignMode : Boolean)');
 CL.AddDelphiFunction('Procedure GetDelegateDriverNames( List : TStrings; DesignMode : Boolean)');
 CL.AddDelphiFunction('Function GetDriverRegistryFile( DesignMode : Boolean) : string');
 CL.AddDelphiFunction('Function GetConnectionRegistryFile( DesignMode : Boolean) : string');
 CL.AddDelphiFunction('Procedure RegisterDriver( const DriverName : string)');
 CL.AddDelphiFunction('Procedure UnregisterDriver( const DriverName : string)');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TSqlServerMethodServerMethodName_W(Self: TSqlServerMethod; const T: string);
begin Self.ServerMethodName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSqlServerMethodServerMethodName_R(Self: TSqlServerMethod; var T: string);
begin T := Self.ServerMethodName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableTableName_W(Self: TSQLTable; const T: string);
begin Self.TableName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableTableName_R(Self: TSQLTable; var T: string);
begin T := Self.TableName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterSource_W(Self: TSQLTable; const T: TDataSource);
begin Self.MasterSource := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterSource_R(Self: TSQLTable; var T: TDataSource);
begin T := Self.MasterSource; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterFields_W(Self: TSQLTable; const T: string);
begin Self.MasterFields := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableMasterFields_R(Self: TSQLTable; var T: string);
begin T := Self.MasterFields; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexName_W(Self: TSQLTable; const T: string);
begin Self.IndexName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexName_R(Self: TSQLTable; var T: string);
begin T := Self.IndexName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldNames_W(Self: TSQLTable; const T: string);
begin Self.IndexFieldNames := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldNames_R(Self: TSQLTable; var T: string);
begin T := Self.IndexFieldNames; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFieldCount_R(Self: TSQLTable; var T: Integer);
begin T := Self.IndexFieldCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFields_W(Self: TSQLTable; const T: TField; const t1: Integer);
begin Self.IndexFields[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLTableIndexFields_R(Self: TSQLTable; var T: TField; const t1: Integer);
begin T := Self.IndexFields[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcStoredProcName_W(Self: TSQLStoredProc; const T: string);
begin Self.StoredProcName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcStoredProcName_R(Self: TSQLStoredProc; var T: string);
begin T := Self.StoredProcName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcPackageName_W(Self: TSQLStoredProc; const T: string);
begin Self.PackageName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLStoredProcPackageName_R(Self: TSQLStoredProc; var T: string);
begin T := Self.PackageName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQuerySQL_W(Self: TSQLQuery; const T: TStrings);
begin Self.SQL := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQuerySQL_R(Self: TSQLQuery; var T: TStrings);
begin T := Self.SQL; end;

(*----------------------------------------------------------------------------*)
procedure TSQLQueryText_R(Self: TSQLQuery; var T: string);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetNumericMapping_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.NumericMapping := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetNumericMapping_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.NumericMapping; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetGetMetadata_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.GetMetadata := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetGetMetadata_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.GetMetadata; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSchemaName_W(Self: TCustomSQLDataSet; const T: string);
begin Self.SchemaName := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSchemaName_R(Self: TCustomSQLDataSet; var T: string);
begin T := Self.SchemaName; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseInsertSql_W(Self: TCustomSQLDataSet; const T: TParseInsertSqlEvent);
begin Self.ParseInsertSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseInsertSql_R(Self: TCustomSQLDataSet; var T: TParseInsertSqlEvent);
begin T := Self.ParseInsertSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseUpdateSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseUpdateSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseUpdateSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseUpdateSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseDeleteSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseDeleteSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseDeleteSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseDeleteSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseSelectSql_W(Self: TCustomSQLDataSet; const T: TParseSqlEvent);
begin Self.ParseSelectSql := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetParseSelectSql_R(Self: TCustomSQLDataSet; var T: TParseSqlEvent);
begin T := Self.ParseSelectSql; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSQLConnection_W(Self: TCustomSQLDataSet; const T: TSQLConnection);
begin Self.SQLConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetSQLConnection_R(Self: TCustomSQLDataSet; var T: TSQLConnection);
begin T := Self.SQLConnection; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetRecordCount_R(Self: TCustomSQLDataSet; var T: Integer);
begin T := Self.RecordCount; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetDesignerData_W(Self: TCustomSQLDataSet; const T: string);
begin Self.DesignerData := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetDesignerData_R(Self: TCustomSQLDataSet; var T: string);
begin T := Self.DesignerData; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetPrepared_W(Self: TCustomSQLDataSet; const T: Boolean);
begin Self.Prepared := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetPrepared_R(Self: TCustomSQLDataSet; var T: Boolean);
begin T := Self.Prepared; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetIndexDefs_W(Self: TCustomSQLDataSet; const T: TIndexDefs);
begin Self.IndexDefs := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetIndexDefs_R(Self: TCustomSQLDataSet; var T: TIndexDefs);
begin T := Self.IndexDefs; end;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData39_P(Self: TCustomSQLDataSet;  Field : TField; var Buffer : TValueBuffer) : Boolean;
Begin Result := Self.GetFieldData(Field, Buffer); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetGetFieldData38_P(Self: TCustomSQLDataSet;  FieldNo : Integer; var Buffer : TValueBuffer) : Boolean;
Begin Result := Self.GetFieldData(FieldNo, Buffer); END;

(*----------------------------------------------------------------------------*)
Procedure TCustomSQLDataSetGetDetailLinkFields37_P(Self: TCustomSQLDataSet;  MasterFields, DetailFields : TList);
Begin Self.GetDetailLinkFields(MasterFields, DetailFields); END;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetCommandText_W(Self: TCustomSQLDataSet; const T: string);
begin Self.CommandText := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomSQLDataSetCommandText_R(Self: TCustomSQLDataSet; var T: string);
begin T := Self.CommandText; end;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetCreate36_P(Self: TClass; CreateNewInstance: Boolean;  AOwner : TComponent; DBXReader : TDBXReader; AOwnsInstance : Boolean):TObject;
Begin Result := TCustomSQLDataSet.Create(AOwner, DBXReader, AOwnsInstance); END;

(*----------------------------------------------------------------------------*)
Function TCustomSQLDataSetCreate35_P(Self: TClass; CreateNewInstance: Boolean;  AOwner : TComponent):TObject;
Begin Result := TCustomSQLDataSet.Create(AOwner); END;

(*----------------------------------------------------------------------------*)
procedure TFLDDescbCalcField_W(Self: TFLDDesc; const T: WordBool);
begin Self.bCalcField := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescbCalcField_R(Self: TFLDDesc; var T: WordBool);
begin T := Self.bCalcField; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldrRights_W(Self: TFLDDesc; const T: FLDRights);
begin Self.efldrRights := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldrRights_R(Self: TFLDDesc; var T: FLDRights);
begin T := Self.efldrRights; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldvVchk_W(Self: TFLDDesc; const T: FLDVchk);
begin Self.efldvVchk := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescefldvVchk_R(Self: TFLDDesc; var T: FLDVchk);
begin T := Self.efldvVchk; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciNullOffset_W(Self: TFLDDesc; const T: Word);
begin Self.iNullOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciNullOffset_R(Self: TFLDDesc; var T: Word);
begin T := Self.iNullOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciLen_W(Self: TFLDDesc; const T: LongWord);
begin Self.iLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciLen_R(Self: TFLDDesc; var T: LongWord);
begin T := Self.iLen; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciOffset_W(Self: TFLDDesc; const T: Word);
begin Self.iOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciOffset_R(Self: TFLDDesc; var T: Word);
begin T := Self.iOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits2_W(Self: TFLDDesc; const T: SmallInt);
begin Self.iUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits2_R(Self: TFLDDesc; var T: SmallInt);
begin T := Self.iUnits2; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits1_W(Self: TFLDDesc; const T: SmallInt);
begin Self.iUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciUnits1_R(Self: TFLDDesc; var T: SmallInt);
begin T := Self.iUnits1; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciSubType_W(Self: TFLDDesc; const T: Word);
begin Self.iSubType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciSubType_R(Self: TFLDDesc; var T: Word);
begin T := Self.iSubType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldType_W(Self: TFLDDesc; const T: Word);
begin Self.iFldType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldType_R(Self: TFLDDesc; var T: Word);
begin T := Self.iFldType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescszName_W(Self: TFLDDesc; const T: string);
begin Self.szName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescszName_R(Self: TFLDDesc; var T: string);
begin T := Self.szName; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldNum_W(Self: TFLDDesc; const T: Word);
begin Self.iFldNum := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDesciFldNum_R(Self: TFLDDesc; var T: Word);
begin T := Self.iFldNum; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFCalcField_W(Self: TFLDDesc; const T: WordBool);
Begin Self.FCalcField := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFCalcField_R(Self: TFLDDesc; var T: WordBool);
Begin T := Self.FCalcField; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDRights_W(Self: TFLDDesc; const T: FLDRights);
Begin Self.FFLDRights := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDRights_R(Self: TFLDDesc; var T: FLDRights);
Begin T := Self.FFLDRights; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDVchk_W(Self: TFLDDesc; const T: FLDVchk);
Begin Self.FFLDVchk := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFLDVchk_R(Self: TFLDDesc; var T: FLDVchk);
Begin T := Self.FFLDVchk; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFNullOffset_W(Self: TFLDDesc; const T: Word);
Begin Self.FNullOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFNullOffset_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FNullOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFLen_W(Self: TFLDDesc; const T: LongWord);
Begin Self.FLen := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFLen_R(Self: TFLDDesc; var T: LongWord);
Begin T := Self.FLen; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFOffset_W(Self: TFLDDesc; const T: Word);
Begin Self.FOffset := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFOffset_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FOffset; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits2_W(Self: TFLDDesc; const T: SmallInt);
Begin Self.FUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits2_R(Self: TFLDDesc; var T: SmallInt);
Begin T := Self.FUnits2; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits1_W(Self: TFLDDesc; const T: SmallInt);
Begin Self.FUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFUnits1_R(Self: TFLDDesc; var T: SmallInt);
Begin T := Self.FUnits1; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFSubType_W(Self: TFLDDesc; const T: Word);
Begin Self.FSubType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFSubType_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FSubType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldType_W(Self: TFLDDesc; const T: Word);
Begin Self.FFldType := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldType_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FFldType; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFName_W(Self: TFLDDesc; const T: string);
Begin Self.FName := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFName_R(Self: TFLDDesc; var T: string);
Begin T := Self.FName; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldNum_W(Self: TFLDDesc; const T: Word);
Begin Self.FFldNum := T; end;

(*----------------------------------------------------------------------------*)
procedure TFLDDescFFldNum_R(Self: TFLDDesc; var T: Word);
Begin T := Self.FFldNum; end;

(*----------------------------------------------------------------------------*)
{procedure TSQLConnectionOnLogin_W(Self: TSQLConnection; const T: TSQLConnectionLoginEvent);
begin Self.OnLogin := T; end;     }

(*----------------------------------------------------------------------------*)
{procedure TSQLConnectionOnLogin_R(Self: TSQLConnection; var T: TSQLConnectionLoginEvent);
begin T := Self.OnLogin; end;  }

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionValidatePeerCertificate_W(Self: TSQLConnection; const T: TValidateCertificate);
begin Self.ValidatePeerCertificate := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionValidatePeerCertificate_R(Self: TSQLConnection; var T: TValidateCertificate);
begin T := Self.ValidatePeerCertificate; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTableScope_W(Self: TSQLConnection; const T: TTableScopes);
begin Self.TableScope := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTableScope_R(Self: TSQLConnection; var T: TTableScopes);
begin T := Self.TableScope; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParams_W(Self: TSQLConnection; const T: TStrings);
begin Self.Params := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParams_R(Self: TSQLConnection; var T: TStrings);
begin T := Self.Params; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLoadParamsOnConnect_W(Self: TSQLConnection; const T: Boolean);
begin Self.LoadParamsOnConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLoadParamsOnConnect_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.LoadParamsOnConnect; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionKeepConnection_W(Self: TSQLConnection; const T: Boolean);
begin Self.KeepConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionKeepConnection_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.KeepConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDriverName_W(Self: TSQLConnection; const T: string);
begin Self.DriverName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDriverName_R(Self: TSQLConnection; var T: string);
begin T := Self.DriverName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionName_W(Self: TSQLConnection; const T: string);
begin Self.ConnectionName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionName_R(Self: TSQLConnection; var T: string);
begin T := Self.ConnectionName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionVendorLib_W(Self: TSQLConnection; const T: string);
begin Self.VendorLib := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionVendorLib_R(Self: TSQLConnection; var T: string);
begin T := Self.VendorLib; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLibraryName_W(Self: TSQLConnection; const T: string);
begin Self.LibraryName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLibraryName_R(Self: TSQLConnection; var T: string);
begin T := Self.LibraryName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionGetDriverFunc_W(Self: TSQLConnection; const T: string);
begin Self.GetDriverFunc := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionGetDriverFunc_R(Self: TSQLConnection; var T: string);
begin T := Self.GetDriverFunc; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionUniqueID_W(Self: TSQLConnection; const T: string);
begin Self.UniqueID := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionUniqueID_R(Self: TSQLConnection; var T: string);
begin T := Self.UniqueID; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionData_R(Self: TSQLConnection; var T: TConnectionData);
begin T := Self.ConnectionData; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTransactionsSupported_R(Self: TSQLConnection; var T: LongBool);
begin T := Self.TransactionsSupported; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionTraceCallbackEvent_R(Self: TSQLConnection; var T: TDBXTraceEvent);
begin T := Self.TraceCallbackEvent; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionSQLHourGlass_W(Self: TSQLConnection; const T: Boolean);
begin Self.SQLHourGlass := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionSQLHourGlass_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.SQLHourGlass; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDBXConnection_R(Self: TSQLConnection; var T: TDBXConnection);
begin T := Self.DBXConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParamsLoaded_W(Self: TSQLConnection; const T: Boolean);
begin Self.ParamsLoaded := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionParamsLoaded_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.ParamsLoaded; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMultipleTransactionsSupported_R(Self: TSQLConnection; var T: LongBool);
begin T := Self.MultipleTransactionsSupported; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMetaData_R(Self: TSQLConnection; var T: TDBXDatabaseMetaData);
begin T := Self.MetaData; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionMaxStmtsPerConn_R(Self: TSQLConnection; var T: LongWord);
begin T := Self.MaxStmtsPerConn; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLocaleCode_W(Self: TSQLConnection; const T: TLocaleCode);
begin Self.LocaleCode := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionLocaleCode_R(Self: TSQLConnection; var T: TLocaleCode);
begin T := Self.LocaleCode; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionInTransaction_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.InTransaction; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionDataSets_R(Self: TSQLConnection; var T: TCustomSQLDataSet; const t1: Integer);
begin T := Self.DataSets[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionState_W(Self: TSQLConnection; const T: TConnectionState);
begin Self.ConnectionState := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionConnectionState_R(Self: TSQLConnection; var T: TConnectionState);
begin T := Self.ConnectionState; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionAutoClone_W(Self: TSQLConnection; const T: Boolean);
begin Self.AutoClone := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionAutoClone_R(Self: TSQLConnection; var T: Boolean);
begin T := Self.AutoClone; end;

(*----------------------------------------------------------------------------*)
procedure TSQLConnectionActiveStatements_R(Self: TSQLConnection; var T: LongWord);
begin T := Self.ActiveStatements; end;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionBeginTransaction28_P(Self: TSQLConnection;  Isolation : TDBXIsolation) : TDBXTransaction;
Begin Result := Self.BeginTransaction(Isolation); END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionBeginTransaction27_P(Self: TSQLConnection) : TDBXTransaction;
Begin Result := Self.BeginTransaction; END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetTableNames26_P(Self: TSQLConnection;  List : TStrings; SchemaName : string; SystemTables : Boolean);
Begin Self.GetTableNames(List, SchemaName, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetTableNames25_P(Self: TSQLConnection;  List : TStrings; SystemTables : Boolean);
Begin Self.GetTableNames(List, SystemTables); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams24_P(Self: TSQLConnection;  ProcedureName, PackageName, SchemaName : string; List : TProcParamList);
Begin Self.GetProcedureParams(ProcedureName, PackageName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams23_P(Self: TSQLConnection;  ProcedureName, PackageName : string; List : TProcParamList);
Begin Self.GetProcedureParams(ProcedureName, PackageName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureParams22_P(Self: TSQLConnection;  ProcedureName : string; List : TProcParamList);
Begin Self.GetProcedureParams(ProcedureName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetSchemaNames21_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetSchemaNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetPackageNames20_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetPackageNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames19_P(Self: TSQLConnection;  const PackageName, SchemaName : string; List : TStrings);
Begin Self.GetProcedureNames(PackageName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames18_P(Self: TSQLConnection;  const PackageName : string; List : TStrings);
Begin Self.GetProcedureNames(PackageName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetProcedureNames17_P(Self: TSQLConnection;  List : TStrings);
Begin Self.GetProcedureNames(List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames16_P(Self: TSQLConnection;  const TableName, SchemaName : string; List : TStrings);
Begin Self.GetIndexNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetIndexNames15_P(Self: TSQLConnection;  const TableName : string; List : TStrings);
Begin Self.GetIndexNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames14_P(Self: TSQLConnection;  const TableName : string; SchemaName : string; List : TStrings);
Begin Self.GetFieldNames(TableName, SchemaName, List); END;

(*----------------------------------------------------------------------------*)
Procedure TSQLConnectionGetFieldNames13_P(Self: TSQLConnection;  const TableName : string; List : TStrings);
Begin Self.GetFieldNames(TableName, List); END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionExecute12_P(Self: TSQLConnection;  const SQL : string; Params : TParams; var ResultSet : TDataSet) : Integer;
Begin Result := Self.Execute(SQL, Params, ResultSet); END;

(*----------------------------------------------------------------------------*)
Function TSQLConnectionExecute11_P(Self: TSQLConnection;  const SQL : string; Params : TParams) : Integer;
Begin Result := Self.Execute(SQL, Params); END;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataIsModified_R(Self: TConnectionData; var T: Boolean);
begin T := Self.IsModified; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataDelegateConnection_W(Self: TConnectionData; const T: TConnectionData);
begin Self.DelegateConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataDelegateConnection_R(Self: TConnectionData; var T: TConnectionData);
begin T := Self.DelegateConnection; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataProperties_W(Self: TConnectionData; const T: TDBXProperties);
begin Self.Properties := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataProperties_R(Self: TConnectionData; var T: TDBXProperties);
begin T := Self.Properties; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataDriverName_W(Self: TConnectionData; const T: string);
begin Self.DriverName := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataDriverName_R(Self: TConnectionData; var T: string);
begin T := Self.DriverName; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataConnectionName_W(Self: TConnectionData; const T: string);
begin Self.ConnectionName := T; end;

(*----------------------------------------------------------------------------*)
procedure TConnectionDataConnectionName_R(Self: TConnectionData; var T: string);
begin T := Self.ConnectionName; end;

(*----------------------------------------------------------------------------*)
Function TConnectionDataCreate2_P(Self: TClass; CreateNewInstance: Boolean;  AParentData : TConnectionData):TObject;
Begin Result := TConnectionData.Create(AParentData); END;

(*----------------------------------------------------------------------------*)
Function TConnectionDataCreate1_P(Self: TClass; CreateNewInstance: Boolean;  AConnection : TSQLConnection):TObject;
Begin Result := TConnectionData.Create(AConnection); END;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorSQLConnection_W(Self: TSQLMonitor; const T: TSQLConnection);
begin Self.SQLConnection := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorSQLConnection_R(Self: TSQLMonitor; var T: TSQLConnection);
begin T := Self.SQLConnection; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceList_W(Self: TSQLMonitor; const T: TStrings);
begin Self.TraceList := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceList_R(Self: TSQLMonitor; var T: TStrings);
begin T := Self.TraceList; end;

(*----------------------------------------------------------------------------*)
{procedure TSQLMonitorOnTrace_W(Self: TSQLMonitor; const T: TTraceEvent);
begin Self.OnTrace := T; end; }

(*----------------------------------------------------------------------------*)
{procedure TSQLMonitorOnTrace_R(Self: TSQLMonitor; var T: TTraceEvent);
begin T := Self.OnTrace; end;  }

(*----------------------------------------------------------------------------*)
{procedure TSQLMonitorOnLogTrace_W(Self: TSQLMonitor; const T: TTraceLogEvent);
begin Self.OnLogTrace := T; end;   }

(*----------------------------------------------------------------------------*)
{procedure TSQLMonitorOnLogTrace_R(Self: TSQLMonitor; var T: TTraceLogEvent);
begin T := Self.OnLogTrace; end;   }

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorFileName_W(Self: TSQLMonitor; const T: string);
begin Self.FileName := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorFileName_R(Self: TSQLMonitor; var T: string);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorAutoSave_W(Self: TSQLMonitor; const T: Boolean);
begin Self.AutoSave := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorAutoSave_R(Self: TSQLMonitor; var T: Boolean);
begin T := Self.AutoSave; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorActive_W(Self: TSQLMonitor; const T: Boolean);
begin Self.Active := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorActive_R(Self: TSQLMonitor; var T: Boolean);
begin T := Self.Active; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorTraceCount_R(Self: TSQLMonitor; var T: Integer);
begin T := Self.TraceCount; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorMaxTraceCount_W(Self: TSQLMonitor; const T: Integer);
begin Self.MaxTraceCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TSQLMonitorMaxTraceCount_R(Self: TSQLMonitor; var T: Integer);
begin T := Self.MaxTraceCount; end;

(*----------------------------------------------------------------------------*)
Function TSQLBlobStreamRead0_P(Self: TSQLBlobStream;  Buffer : TBytes; Offset, Count : Longint) : Longint;
Begin Result := Self.Read(Buffer, Offset, Count); END;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciLen_W(Self: SPParamDesc; const T: LongWord);
Begin Self.iLen := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciLen_R(Self: SPParamDesc; var T: LongWord);
Begin T := Self.iLen; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits2_W(Self: SPParamDesc; const T: SmallInt);
Begin Self.iUnits2 := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits2_R(Self: SPParamDesc; var T: SmallInt);
Begin T := Self.iUnits2; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits1_W(Self: SPParamDesc; const T: SmallInt);
Begin Self.iUnits1 := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciUnits1_R(Self: SPParamDesc; var T: SmallInt);
Begin T := Self.iUnits1; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciDataType_W(Self: SPParamDesc; const T: TFieldType);
Begin Self.iDataType := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciDataType_R(Self: SPParamDesc; var T: TFieldType);
Begin T := Self.iDataType; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciArgType_W(Self: SPParamDesc; const T: TParamType);
Begin Self.iArgType := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciArgType_R(Self: SPParamDesc; var T: TParamType);
Begin T := Self.iArgType; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDescszName_W(Self: SPParamDesc; const T: string);
Begin Self.szName := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDescszName_R(Self: SPParamDesc; var T: string);
Begin T := Self.szName; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciParamNum_W(Self: SPParamDesc; const T: Word);
Begin Self.iParamNum := T; end;

(*----------------------------------------------------------------------------*)
procedure SPParamDesciParamNum_R(Self: SPParamDesc; var T: Word);
Begin T := Self.iParamNum; end;


(*----------------------------------------------------------------------------*)
procedure TCustomConnectionOnLogin_W(Self: TCustomConnection; const T: TLoginEvent);
begin Self.OnLogin := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionOnLogin_R(Self: TCustomConnection; var T: TLoginEvent);
begin T := Self.OnLogin; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeDisconnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.BeforeDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeDisconnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.BeforeDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterDisconnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.AfterDisconnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterDisconnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.AfterDisconnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeConnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.BeforeConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionBeforeConnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.BeforeConnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterConnect_W(Self: TCustomConnection; const T: TNotifyEvent);
begin Self.AfterConnect := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionAfterConnect_R(Self: TCustomConnection; var T: TNotifyEvent);
begin T := Self.AfterConnect; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionLoginPrompt_W(Self: TCustomConnection; const T: Boolean);
begin Self.LoginPrompt := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionLoginPrompt_R(Self: TCustomConnection; var T: Boolean);
begin T := Self.LoginPrompt; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionDataSetCount_R(Self: TCustomConnection; var T: Integer);
begin T := Self.DataSetCount; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionDataSets_R(Self: TCustomConnection; var T: TDataSet; const t1: Integer);
begin T := Self.DataSets[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionConnected_W(Self: TCustomConnection; const T: Boolean);
begin Self.Connected := T; end;

(*----------------------------------------------------------------------------*)
procedure TCustomConnectionConnected_R(Self: TCustomConnection; var T: Boolean);
begin T := Self.Connected; end;

(*----------------------------------------------------------------------------*)
Procedure TCustomConnectionOpen0_P(Self: TCustomConnection);
Begin Self.Open; END;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SqlExpr_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@LoadParamListItems, 'LoadParamListItems', cdRegister);
 S.RegisterDelphiFunction(@FreeProcParams, 'FreeProcParams', cdRegister);
 S.RegisterDelphiFunction(@GetConnectionNames, 'GetConnectionNames', cdRegister);
 S.RegisterDelphiFunction(@GetDisplayDriverName, 'GetDisplayDriverName', cdRegister);
 S.RegisterDelphiFunction(@GetDisplayDriverNames, 'GetDisplayDriverNames', cdRegister);
 S.RegisterDelphiFunction(@GetDriverNames, 'GetDriverNames', cdRegister);
 S.RegisterDelphiFunction(@GetDelegateDriverNames, 'GetDelegateDriverNames', cdRegister);
 S.RegisterDelphiFunction(@GetDriverRegistryFile, 'GetDriverRegistryFile', cdRegister);
 S.RegisterDelphiFunction(@GetConnectionRegistryFile, 'GetConnectionRegistryFile', cdRegister);
 S.RegisterDelphiFunction(@RegisterDriver, 'RegisterDriver', cdRegister);
 S.RegisterDelphiFunction(@UnregisterDriver, 'UnregisterDriver', cdRegister);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSqlServerMethod(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSqlServerMethod) do
  begin
    RegisterMethod(@TSqlServerMethod.ExecuteMethod, 'ExecuteMethod');
    RegisterPropertyHelper(@TSqlServerMethodServerMethodName_R,@TSqlServerMethodServerMethodName_W,'ServerMethodName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLTable(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLTable) do
  begin
    RegisterMethod(@TSQLTable.DeleteRecords, 'DeleteRecords');
    RegisterMethod(@TSQLTable.GetIndexNames, 'GetIndexNames');
    RegisterPropertyHelper(@TSQLTableIndexFields_R,@TSQLTableIndexFields_W,'IndexFields');
    RegisterPropertyHelper(@TSQLTableIndexFieldCount_R,nil,'IndexFieldCount');
    RegisterPropertyHelper(@TSQLTableIndexFieldNames_R,@TSQLTableIndexFieldNames_W,'IndexFieldNames');
    RegisterPropertyHelper(@TSQLTableIndexName_R,@TSQLTableIndexName_W,'IndexName');
    RegisterPropertyHelper(@TSQLTableMasterFields_R,@TSQLTableMasterFields_W,'MasterFields');
    RegisterPropertyHelper(@TSQLTableMasterSource_R,@TSQLTableMasterSource_W,'MasterSource');
    RegisterPropertyHelper(@TSQLTableTableName_R,@TSQLTableTableName_W,'TableName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLStoredProc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLStoredProc) do
  begin
    RegisterVirtualMethod(@TSQLStoredProc.ExecProc, 'ExecProc');
    RegisterMethod(@TSQLStoredProc.NextRecordSet, 'NextRecordSet');
    RegisterPropertyHelper(@TSQLStoredProcPackageName_R,@TSQLStoredProcPackageName_W,'PackageName');
    RegisterPropertyHelper(@TSQLStoredProcStoredProcName_R,@TSQLStoredProcStoredProcName_W,'StoredProcName');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLQuery(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLQuery) do
  begin
    RegisterPropertyHelper(@TSQLQueryText_R,nil,'Text');
    RegisterPropertyHelper(@TSQLQuerySQL_R,@TSQLQuerySQL_W,'SQL');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLDataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLDataSet) do
  begin
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomSQLDataSet(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomSQLDataSet) do
  begin
    RegisterConstructor(@TCustomSQLDataSetCreate36_P, 'Create36');
    RegisterPropertyHelper(@TCustomSQLDataSetCommandText_R,@TCustomSQLDataSetCommandText_W,'CommandText');
    RegisterMethod(@TCustomSQLDataSet.GetCommandNames, 'GetCommandNames');
    RegisterMethod(@TCustomSQLDataSet.GetKeyFieldNames, 'GetKeyFieldNames');
    RegisterVirtualMethod(@TCustomSQLDataSet.GetQuoteChar, 'GetQuoteChar');
    RegisterMethod(@TCustomSQLDataSet.ParamByName, 'ParamByName');
    RegisterVirtualMethod(@TCustomSQLDataSet.PrepareStatement, 'PrepareStatement');
    RegisterPropertyHelper(@TCustomSQLDataSetIndexDefs_R,@TCustomSQLDataSetIndexDefs_W,'IndexDefs');
    RegisterMethod(@TCustomSQLDataSet.SetSchemaInfo, 'SetSchemaInfo');
    RegisterPropertyHelper(@TCustomSQLDataSetPrepared_R,@TCustomSQLDataSetPrepared_W,'Prepared');
    RegisterPropertyHelper(@TCustomSQLDataSetDesignerData_R,@TCustomSQLDataSetDesignerData_W,'DesignerData');
    RegisterPropertyHelper(@TCustomSQLDataSetRecordCount_R,nil,'RecordCount');
    RegisterPropertyHelper(@TCustomSQLDataSetSQLConnection_R,@TCustomSQLDataSetSQLConnection_W,'SQLConnection');
    RegisterPropertyHelper(@TCustomSQLDataSetParseSelectSql_R,@TCustomSQLDataSetParseSelectSql_W,'ParseSelectSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseDeleteSql_R,@TCustomSQLDataSetParseDeleteSql_W,'ParseDeleteSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseUpdateSql_R,@TCustomSQLDataSetParseUpdateSql_W,'ParseUpdateSql');
    RegisterPropertyHelper(@TCustomSQLDataSetParseInsertSql_R,@TCustomSQLDataSetParseInsertSql_W,'ParseInsertSql');
    RegisterPropertyHelper(@TCustomSQLDataSetSchemaName_R,@TCustomSQLDataSetSchemaName_W,'SchemaName');
    RegisterPropertyHelper(@TCustomSQLDataSetGetMetadata_R,@TCustomSQLDataSetGetMetadata_W,'GetMetadata');
    RegisterPropertyHelper(@TCustomSQLDataSetNumericMapping_R,@TCustomSQLDataSetNumericMapping_W,'NumericMapping');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TFLDDesc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TFLDDesc) do
  begin
    RegisterPropertyHelper(@TFLDDescFFldNum_R,@TFLDDescFFldNum_W,'FFldNum');
    RegisterPropertyHelper(@TFLDDescFName_R,@TFLDDescFName_W,'FName');
    RegisterPropertyHelper(@TFLDDescFFldType_R,@TFLDDescFFldType_W,'FFldType');
    RegisterPropertyHelper(@TFLDDescFSubType_R,@TFLDDescFSubType_W,'FSubType');
    RegisterPropertyHelper(@TFLDDescFUnits1_R,@TFLDDescFUnits1_W,'FUnits1');
    RegisterPropertyHelper(@TFLDDescFUnits2_R,@TFLDDescFUnits2_W,'FUnits2');
    RegisterPropertyHelper(@TFLDDescFOffset_R,@TFLDDescFOffset_W,'FOffset');
    RegisterPropertyHelper(@TFLDDescFLen_R,@TFLDDescFLen_W,'FLen');
    RegisterPropertyHelper(@TFLDDescFNullOffset_R,@TFLDDescFNullOffset_W,'FNullOffset');
    RegisterPropertyHelper(@TFLDDescFFLDVchk_R,@TFLDDescFFLDVchk_W,'FFLDVchk');
    RegisterPropertyHelper(@TFLDDescFFLDRights_R,@TFLDDescFFLDRights_W,'FFLDRights');
    RegisterPropertyHelper(@TFLDDescFCalcField_R,@TFLDDescFCalcField_W,'FCalcField');
    RegisterPropertyHelper(@TFLDDesciFldNum_R,@TFLDDesciFldNum_W,'iFldNum');
    RegisterPropertyHelper(@TFLDDescszName_R,@TFLDDescszName_W,'szName');
    RegisterPropertyHelper(@TFLDDesciFldType_R,@TFLDDesciFldType_W,'iFldType');
    RegisterPropertyHelper(@TFLDDesciSubType_R,@TFLDDesciSubType_W,'iSubType');
    RegisterPropertyHelper(@TFLDDesciUnits1_R,@TFLDDesciUnits1_W,'iUnits1');
    RegisterPropertyHelper(@TFLDDesciUnits2_R,@TFLDDesciUnits2_W,'iUnits2');
    RegisterPropertyHelper(@TFLDDesciOffset_R,@TFLDDesciOffset_W,'iOffset');
    RegisterPropertyHelper(@TFLDDesciLen_R,@TFLDDesciLen_W,'iLen');
    RegisterPropertyHelper(@TFLDDesciNullOffset_R,@TFLDDesciNullOffset_W,'iNullOffset');
    RegisterPropertyHelper(@TFLDDescefldvVchk_R,@TFLDDescefldvVchk_W,'efldvVchk');
    RegisterPropertyHelper(@TFLDDescefldrRights_R,@TFLDDescefldrRights_W,'efldrRights');
    RegisterPropertyHelper(@TFLDDescbCalcField_R,@TFLDDescbCalcField_W,'bCalcField');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLDataLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLDataLink) do
  begin
    RegisterConstructor(@TSQLDataLink.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TCustomConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomConnection) do
  begin
    RegisterMethod(@TCustomConnectionOpen0_P, 'Open');
    RegisterMethod(@TCustomConnection.Close, 'Close');
    RegisterPropertyHelper(@TCustomConnectionConnected_R,@TCustomConnectionConnected_W,'Connected');
    RegisterPropertyHelper(@TCustomConnectionDataSets_R,nil,'DataSets');
    RegisterPropertyHelper(@TCustomConnectionDataSetCount_R,nil,'DataSetCount');
    RegisterPropertyHelper(@TCustomConnectionLoginPrompt_R,@TCustomConnectionLoginPrompt_W,'LoginPrompt');
    RegisterPropertyHelper(@TCustomConnectionAfterConnect_R,@TCustomConnectionAfterConnect_W,'AfterConnect');
    RegisterPropertyHelper(@TCustomConnectionBeforeConnect_R,@TCustomConnectionBeforeConnect_W,'BeforeConnect');
    RegisterPropertyHelper(@TCustomConnectionAfterDisconnect_R,@TCustomConnectionAfterDisconnect_W,'AfterDisconnect');
    RegisterPropertyHelper(@TCustomConnectionBeforeDisconnect_R,@TCustomConnectionBeforeDisconnect_W,'BeforeDisconnect');
    RegisterPropertyHelper(@TCustomConnectionOnLogin_R,@TCustomConnectionOnLogin_W,'OnLogin');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLConnection(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLConnection) do
  begin
    RegisterMethod(@TSQLConnection.AddConnectNotification, 'AddConnectNotification');
    RegisterMethod(@TSQLConnection.RemoveConnectNotification, 'RemoveConnectNotification');
    RegisterMethod(@TSQLConnection.CloneConnection, 'CloneConnection');
    RegisterMethod(@TSQLConnection.CloseDataSets, 'CloseDataSets');
    RegisterMethod(@TSQLConnection.Commit, 'Commit');
    RegisterMethod(@TSQLConnection.CommitFreeAndNil, 'CommitFreeAndNil');
    RegisterMethod(@TSQLConnectionExecute11_P, 'Execute11');
    RegisterMethod(@TSQLConnectionExecute12_P, 'Execute12');
    RegisterMethod(@TSQLConnection.ExecuteDirect, 'ExecuteDirect');
    RegisterMethod(@TSQLConnectionGetFieldNames13_P, 'GetFieldNames13');
    RegisterMethod(@TSQLConnectionGetFieldNames14_P, 'GetFieldNames14');
    RegisterMethod(@TSQLConnectionGetIndexNames15_P, 'GetIndexNames15');
    RegisterMethod(@TSQLConnectionGetIndexNames16_P, 'GetIndexNames16');
    RegisterMethod(@TSQLConnectionGetProcedureNames17_P, 'GetProcedureNames17');
    RegisterMethod(@TSQLConnectionGetProcedureNames18_P, 'GetProcedureNames18');
    RegisterMethod(@TSQLConnectionGetProcedureNames19_P, 'GetProcedureNames19');
    RegisterMethod(@TSQLConnectionGetPackageNames20_P, 'GetPackageNames20');
    RegisterMethod(@TSQLConnectionGetSchemaNames21_P, 'GetSchemaNames21');
    RegisterMethod(@TSQLConnection.GetCommandTypes, 'GetCommandTypes');
    RegisterMethod(@TSQLConnection.GetServerMethodNames, 'GetServerMethodNames');
    RegisterMethod(@TSQLConnection.GetDefaultSchemaName, 'GetDefaultSchemaName');
    RegisterMethod(@TSQLConnectionGetProcedureParams22_P, 'GetProcedureParams22');
    RegisterMethod(@TSQLConnectionGetProcedureParams23_P, 'GetProcedureParams23');
    RegisterMethod(@TSQLConnectionGetProcedureParams24_P, 'GetProcedureParams24');
    RegisterMethod(@TSQLConnectionGetTableNames25_P, 'GetTableNames25');
    RegisterMethod(@TSQLConnectionGetTableNames26_P, 'GetTableNames26');
    RegisterMethod(@TSQLConnection.LoadParamsFromIniFile, 'LoadParamsFromIniFile');
    RegisterMethod(@TSQLConnection.Rollback, 'Rollback');
    RegisterMethod(@TSQLConnection.RollbackFreeAndNil, 'RollbackFreeAndNil');
    RegisterMethod(@TSQLConnection.RollbackIncompleteFreeAndNil, 'RollbackIncompleteFreeAndNil');
    RegisterMethod(@TSQLConnection.HasTransaction, 'HasTransaction');
   // RegisterMethod(@TSQLConnection.SetTraceEvent, 'SetTraceEvent');
    RegisterMethod(@TSQLConnectionBeginTransaction27_P, 'BeginTransaction27');
    RegisterMethod(@TSQLConnectionBeginTransaction28_P, 'BeginTransaction28');
    RegisterMethod(@TSQLConnection.GetLoginUsername, 'GetLoginUsername');
    RegisterPropertyHelper(@TSQLConnectionActiveStatements_R,nil,'ActiveStatements');
    RegisterPropertyHelper(@TSQLConnectionAutoClone_R,@TSQLConnectionAutoClone_W,'AutoClone');
    RegisterPropertyHelper(@TSQLConnectionConnectionState_R,@TSQLConnectionConnectionState_W,'ConnectionState');
    RegisterPropertyHelper(@TSQLConnectionDataSets_R,nil,'DataSets');
    RegisterPropertyHelper(@TSQLConnectionInTransaction_R,nil,'InTransaction');
    RegisterPropertyHelper(@TSQLConnectionLocaleCode_R,@TSQLConnectionLocaleCode_W,'LocaleCode');
    RegisterPropertyHelper(@TSQLConnectionMaxStmtsPerConn_R,nil,'MaxStmtsPerConn');
    RegisterPropertyHelper(@TSQLConnectionMetaData_R,nil,'MetaData');
    RegisterPropertyHelper(@TSQLConnectionMultipleTransactionsSupported_R,nil,'MultipleTransactionsSupported');
    RegisterPropertyHelper(@TSQLConnectionParamsLoaded_R,@TSQLConnectionParamsLoaded_W,'ParamsLoaded');
    RegisterPropertyHelper(@TSQLConnectionDBXConnection_R,nil,'DBXConnection');
    RegisterPropertyHelper(@TSQLConnectionSQLHourGlass_R,@TSQLConnectionSQLHourGlass_W,'SQLHourGlass');
    RegisterPropertyHelper(@TSQLConnectionTraceCallbackEvent_R,nil,'TraceCallbackEvent');
    RegisterPropertyHelper(@TSQLConnectionTransactionsSupported_R,nil,'TransactionsSupported');
    RegisterPropertyHelper(@TSQLConnectionConnectionData_R,nil,'ConnectionData');
    RegisterPropertyHelper(@TSQLConnectionUniqueID_R,@TSQLConnectionUniqueID_W,'UniqueID');
    RegisterPropertyHelper(@TSQLConnectionGetDriverFunc_R,@TSQLConnectionGetDriverFunc_W,'GetDriverFunc');
    RegisterPropertyHelper(@TSQLConnectionLibraryName_R,@TSQLConnectionLibraryName_W,'LibraryName');
    RegisterPropertyHelper(@TSQLConnectionVendorLib_R,@TSQLConnectionVendorLib_W,'VendorLib');
    RegisterPropertyHelper(@TSQLConnectionConnectionName_R,@TSQLConnectionConnectionName_W,'ConnectionName');
    RegisterPropertyHelper(@TSQLConnectionDriverName_R,@TSQLConnectionDriverName_W,'DriverName');
    RegisterPropertyHelper(@TSQLConnectionKeepConnection_R,@TSQLConnectionKeepConnection_W,'KeepConnection');
    RegisterPropertyHelper(@TSQLConnectionLoadParamsOnConnect_R,@TSQLConnectionLoadParamsOnConnect_W,'LoadParamsOnConnect');
    RegisterPropertyHelper(@TSQLConnectionParams_R,@TSQLConnectionParams_W,'Params');
    RegisterPropertyHelper(@TSQLConnectionTableScope_R,@TSQLConnectionTableScope_W,'TableScope');
    RegisterPropertyHelper(@TSQLConnectionValidatePeerCertificate_R,@TSQLConnectionValidatePeerCertificate_W,'ValidatePeerCertificate');
    //RegisterPropertyHelper(@TSQLConnectionOnLogin_R,@TSQLConnectionOnLogin_W,'OnLogin');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TConnectionData(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TConnectionData) do
  begin
    RegisterConstructor(@TConnectionDataCreate1_P, 'Create1');
    RegisterConstructor(@TConnectionDataCreate2_P, 'Create2');
    RegisterMethod(@TConnectionData.UpdateProperties, 'UpdateProperties');
    RegisterMethod(@TConnectionData.AddProperties, 'AddProperties');
    RegisterMethod(@TConnectionData.BeginUpdate, 'BeginUpdate');
    RegisterMethod(@TConnectionData.EndUpdate, 'EndUpdate');
    RegisterMethod(@TConnectionData.ReloadProperties, 'ReloadProperties');
    RegisterMethod(@TConnectionData.RefreshProperties, 'RefreshProperties');
    RegisterPropertyHelper(@TConnectionDataConnectionName_R,@TConnectionDataConnectionName_W,'ConnectionName');
    RegisterPropertyHelper(@TConnectionDataDriverName_R,@TConnectionDataDriverName_W,'DriverName');
    RegisterPropertyHelper(@TConnectionDataProperties_R,@TConnectionDataProperties_W,'Properties');
    RegisterPropertyHelper(@TConnectionDataDelegateConnection_R,@TConnectionDataDelegateConnection_W,'DelegateConnection');
    RegisterPropertyHelper(@TConnectionDataIsModified_R,nil,'IsModified');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLMonitor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLMonitor) do
  begin
    RegisterMethod(@TSQLMonitor.LoadFromFile, 'LoadFromFile');
    RegisterMethod(@TSQLMonitor.SaveToFile, 'SaveToFile');
    RegisterPropertyHelper(@TSQLMonitorMaxTraceCount_R,@TSQLMonitorMaxTraceCount_W,'MaxTraceCount');
    RegisterPropertyHelper(@TSQLMonitorTraceCount_R,nil,'TraceCount');
    RegisterPropertyHelper(@TSQLMonitorActive_R,@TSQLMonitorActive_W,'Active');
    RegisterPropertyHelper(@TSQLMonitorAutoSave_R,@TSQLMonitorAutoSave_W,'AutoSave');
    RegisterPropertyHelper(@TSQLMonitorFileName_R,@TSQLMonitorFileName_W,'FileName');
   // RegisterPropertyHelper(@TSQLMonitorOnLogTrace_R,@TSQLMonitorOnLogTrace_W,'OnLogTrace');
    //RegisterPropertyHelper(@TSQLMonitorOnTrace_R,@TSQLMonitorOnTrace_W,'OnTrace');
    RegisterPropertyHelper(@TSQLMonitorTraceList_R,@TSQLMonitorTraceList_W,'TraceList');
    RegisterPropertyHelper(@TSQLMonitorSQLConnection_R,@TSQLMonitorSQLConnection_W,'SQLConnection');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSQLBlobStream(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSQLBlobStream) do
  begin
    RegisterConstructor(@TSQLBlobStream.Create, 'Create');
    RegisterMethod(@TSQLBlobStream.ReadBlobData, 'ReadBlobData');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SPParamDesc(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(SPParamDesc) do
  begin
    RegisterPropertyHelper(@SPParamDesciParamNum_R,@SPParamDesciParamNum_W,'iParamNum');
    RegisterPropertyHelper(@SPParamDescszName_R,@SPParamDescszName_W,'szName');
    RegisterPropertyHelper(@SPParamDesciArgType_R,@SPParamDesciArgType_W,'iArgType');
    RegisterPropertyHelper(@SPParamDesciDataType_R,@SPParamDesciDataType_W,'iDataType');
    RegisterPropertyHelper(@SPParamDesciUnits1_R,@SPParamDesciUnits1_W,'iUnits1');
    RegisterPropertyHelper(@SPParamDesciUnits2_R,@SPParamDesciUnits2_W,'iUnits2');
    RegisterPropertyHelper(@SPParamDesciLen_R,@SPParamDesciLen_W,'iLen');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SqlExpr(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TCustomConnection) do
  with CL.Add(TSQLConnection) do
  with CL.Add(TCustomSQLDataSet) do
  with CL.Add(TSQLDataSet) do
  with CL.Add(TSQLQuery) do
  with CL.Add(TSQLStoredProc) do
  with CL.Add(TSQLTable) do
  RIRegister_SPParamDesc(CL);
  RIRegister_TSQLBlobStream(CL);
  RIRegister_TSQLMonitor(CL);
  RIRegister_TConnectionData(CL);
  RIRegister_TCustomConnection(CL);
  RIRegister_TSQLConnection(CL);
  RIRegister_TSQLDataLink(CL);
  RIRegister_TFLDDesc(CL);
  RIRegister_TCustomSQLDataSet(CL);
  RIRegister_TSQLDataSet(CL);
  RIRegister_TSQLQuery(CL);
  RIRegister_TSQLStoredProc(CL);
  RIRegister_TSQLTable(CL);
  RIRegister_TSqlServerMethod(CL);
end;



{ TPSImport_SqlExpr }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SqlExpr.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SqlExpr(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SqlExpr.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SqlExpr(ri);
  RIRegister_SqlExpr_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)


end.
